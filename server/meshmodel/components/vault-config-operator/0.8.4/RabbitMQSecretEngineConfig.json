{"kind":"RabbitMQSecretEngineConfig","apiVersion":"v1alpha1","displayName":"Rabbit MQ Secret Engine Config","format":"JSON","metadata":{},"model":{"name":"vault-config-operator","version":"0.8.4","modelDisplayName":"vault-config-operator","category":"","subCategory":""},"schema":"{\n \"description\": \"RabbitMQSecretEngineConfigSpec defines the desired state of RabbitMQSecretEngineConfig\",\n \"properties\": {\n  \"authentication\": {\n   \"description\": \"Authentication is the k8s auth configuration to be used to execute this request\",\n   \"properties\": {\n    \"namespace\": {\n     \"description\": \"Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.\",\n     \"type\": \"string\"\n    },\n    \"path\": {\n     \"default\": \"kubernetes\",\n     \"description\": \"Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}\",\n     \"pattern\": \"^(?:/?[\\\\w;:@\\u0026=\\\\$-\\\\.\\\\+]*)+/?\",\n     \"type\": \"string\"\n    },\n    \"role\": {\n     \"description\": \"Role the role to be used during authentication\",\n     \"type\": \"string\"\n    },\n    \"serviceAccount\": {\n     \"default\": {\n      \"name\": \"default\"\n     },\n     \"description\": \"ServiceAccount is the service account used for the kube auth authentication\",\n     \"properties\": {\n      \"name\": {\n       \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"connection\": {\n   \"description\": \"Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.\",\n   \"properties\": {\n    \"address\": {\n     \"description\": \"Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/\",\n     \"type\": \"string\"\n    },\n    \"maxRetries\": {\n     \"description\": \"MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).\",\n     \"type\": \"integer\"\n    },\n    \"tLSConfig\": {\n     \"properties\": {\n      \"cacert\": {\n       \"description\": \"Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.\",\n       \"type\": \"string\"\n      },\n      \"skipVerify\": {\n       \"description\": \"SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.\",\n       \"type\": \"boolean\"\n      },\n      \"tlsSecret\": {\n       \"description\": \"TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -\\u003e \\\"ca.crt\\\", certificate -\\u003e \\\"tls.crt\\\", key -\\u003e \\\"tls.key\\\"\",\n       \"properties\": {\n        \"name\": {\n         \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\",\n       \"x-kubernetes-map-type\": \"atomic\"\n      },\n      \"tlsServerName\": {\n       \"description\": \"TLSServerName Name to use as the SNI host when connecting via TLS.\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"timeOut\": {\n     \"description\": \"Timeout Timeout variable. The default value is 60s.\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"connectionURI\": {\n   \"description\": \"ConnectionURL Specifies the connection string used to connect to the RabbitMQ cluster.\",\n   \"pattern\": \"^(http|https):\\\\/\\\\/.+$\",\n   \"type\": \"string\"\n  },\n  \"leaseMaxTTL\": {\n   \"description\": \"Lease maximum TTL for generated credentials in seconds.\",\n   \"type\": \"integer\"\n  },\n  \"leaseTTL\": {\n   \"description\": \"Lease TTL for generated credentials in seconds.\",\n   \"type\": \"integer\"\n  },\n  \"passwordPolicy\": {\n   \"description\": \"PasswordPolicy The name of the password policy to use when generating passwords for this engine. Defaults to generating an alphanumeric password if not set.\",\n   \"type\": \"string\"\n  },\n  \"path\": {\n   \"description\": \"Path at which to make the configuration. The final path will be {[spec.authentication.namespace]}/{spec.path}/{metadata.name}/config/connection. The authentication role must have the following capabilities = [ \\\"create\\\", \\\"read\\\", \\\"update\\\", \\\"delete\\\"] on that path.\",\n   \"pattern\": \"^(?:/?[\\\\w;:@\\u0026=\\\\$-\\\\.\\\\+]*)+/?\",\n   \"type\": \"string\"\n  },\n  \"rootCredentials\": {\n   \"description\": \"RootCredentials specifies how to retrieve the credentials for this RabbitMQEngine connection.\",\n   \"properties\": {\n    \"passwordKey\": {\n     \"default\": \"password\",\n     \"description\": \"PasswordKey key to be used when retrieving the password, required with VaultSecrets and Kubernetes secrets, ignored with RandomSecret\",\n     \"type\": \"string\"\n    },\n    \"randomSecret\": {\n     \"description\": \"RandomSecret retrieves the credentials from the Vault secret corresponding to this RandomSecret. This will map the \\\"username\\\" and \\\"password\\\" keys of the secret to the username and password of this config. All other keys will be ignored. If the RandomSecret is refreshed the operator retrieves the new secret from Vault and updates this configuration. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. When using randomSecret a username must be specified in the spec.username password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \\\"{{\\\"password\\\"}}\\\"\\\".\",\n     \"properties\": {\n      \"name\": {\n       \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"secret\": {\n     \"description\": \"Secret retrieves the credentials from a Kubernetes secret. The secret must be of basicauth type (https://kubernetes.io/docs/concepts/configuration/secret/#basic-authentication-secret). This will map the \\\"username\\\" and \\\"password\\\" keys of the secret to the username and password of this config. If the kubernetes secret is updated, this configuration will also be updated. All other keys will be ignored. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. username: Specifies the name of the user to use as the \\\"root\\\" user when connecting to the database. This \\\"root\\\" user is used to create/update/delete users managed by these plugins, so you will need to ensure that this user has permissions to manipulate users appropriate to the database. This is typically used in the connection_url field via the templating directive \\\"{{\\\"username\\\"}}\\\" or \\\"{{\\\"name\\\"}}\\\". password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \\\"{{\\\"password\\\"}}\\\". If username is provided as spec.username, it takes precedence over the username retrieved from the referenced secret\",\n     \"properties\": {\n      \"name\": {\n       \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\",\n     \"x-kubernetes-map-type\": \"atomic\"\n    },\n    \"usernameKey\": {\n     \"default\": \"username\",\n     \"description\": \"UsernameKey key to be used when retrieving the username, optional with VaultSecrets and Kubernetes secrets, ignored with RandomSecret\",\n     \"type\": \"string\"\n    },\n    \"vaultSecret\": {\n     \"description\": \"VaultSecret retrieves the credentials from a Vault secret. This will map the \\\"username\\\" and \\\"password\\\" keys of the secret to the username and password of this config. All other keys will be ignored. Only one of RootCredentialsFromVaultSecret or RootCredentialsFromSecret or RootCredentialsFromRandomSecret can be specified. username: Specifies the name of the user to use as the \\\"root\\\" user when connecting to the database. This \\\"root\\\" user is used to create/update/delete users managed by these plugins, so you will need to ensure that this user has permissions to manipulate users appropriate to the database. This is typically used in the connection_url field via the templating directive \\\"{{\\\"username\\\"}}\\\" or \\\"{{\\\"name\\\"}}\\\". password: Specifies the password to use when connecting with the username. This value will not be returned by Vault when performing a read upon the configuration. This is typically used in the connection_url field via the templating directive \\\"{{\\\"password\\\"}}\\\". If username is provided as spec.username, it takes precedence over the username retrieved from the referenced secret\",\n     \"properties\": {\n      \"path\": {\n       \"description\": \"Path is the path to the secret\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"username\": {\n   \"description\": \"Username Specifies the name of the user to use as the \\\"administrator\\\" user when connecting to the RabbitMQ cluster. This \\\"administrator\\\" user is used to create/update/delete users, so you will need to ensure that this user has permissions to manipulate users. If management plugin is used, this user need to have \\\"administrator\\\" tag, no additional permissions necessary. If username is provided it takes precedence over the username retrieved from the referenced secrets\",\n   \"type\": \"string\"\n  },\n  \"usernameTemplate\": {\n   \"description\": \"UsernameTemplate Vault username template describing how dynamic usernames are generated.\",\n   \"type\": \"string\"\n  },\n  \"verifyConnection\": {\n   \"description\": \"VerifyConnection Specifies if the connection is verified during initial configuration. Defaults to true.\",\n   \"type\": \"boolean\"\n  }\n },\n \"title\": \"Rabbit MQ Secret Engine Config\",\n \"type\": \"object\"\n}"}